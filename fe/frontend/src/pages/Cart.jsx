import { useState, useEffect, useCallback } from "react"
import { useNavigate } from "react-router-dom"
import "../styles/Cart.css"

export default function Cart() {
    const navigate = useNavigate()
    const [cartItems, setCartItems] = useState([])
    const [loading, setLoading] = useState(true)
    const [token] = useState(localStorage.getItem("token"))

    // Load gi·ªè h√†ng khi component mount
    useEffect(() => {
        if (token) {
            loadCart()
        } else {
            setLoading(false)
        }
    }, [token, loadCart])

    // API CALL: L·∫•y gi·ªè h√†ng c·ªßa user
    const loadCart = useCallback(async () => {
        try {
            const res = await fetch("http://localhost:6868/api/cart", {
                method: "GET",
                headers: {
                    "Content-Type": "application/json",
                    Authorization: `Bearer ${token}`,
                },
            })
            const data = await res.json()

            if (res.ok) {
                setCartItems(data.cart?.items || [])
            } else {
                console.error("L·ªói khi t·∫£i gi·ªè h√†ng:", data.error)
                setCartItems([])
            }
        } catch (err) {
            console.error("Kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c server:", err)
            setCartItems([])
        } finally {
            setLoading(false)
        }
    }, [token])

    // API CALL: C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong gi·ªè h√†ng
    const updateQuantity = async (productId, newQuantity, itemType = 'buy') => {
        if (newQuantity < 1) {
            removeFromCart(productId, itemType)
            return
        }

        try {
            const res = await fetch("http://localhost:6868/api/cart/update", {
                method: "PUT",
                headers: {
                    "Content-Type": "application/json",
                    Authorization: `Bearer ${token}`,
                },
                body: JSON.stringify({
                    product_id: productId,
                    quantity: newQuantity,
                    item_type: itemType
                }),
            })
            const data = await res.json()

            if (res.ok) {
                // C·∫≠p nh·∫≠t l·∫°i gi·ªè h√†ng
                loadCart()
            } else {
                alert(data.error || "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng!")
            }
        } catch (err) {
            alert("Kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c server!")
            console.error(err)
        }
    }

    // API CALL: X√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng
    const removeFromCart = async (productId, itemType = 'buy') => {
        try {
            const res = await fetch("http://localhost:6868/api/cart/remove", {
                method: "DELETE",
                headers: {
                    "Content-Type": "application/json",
                    Authorization: `Bearer ${token}`,
                },
                body: JSON.stringify({
                    product_id: productId,
                    item_type: itemType
                }),
            })
            const data = await res.json()

            if (res.ok) {
                // C·∫≠p nh·∫≠t l·∫°i gi·ªè h√†ng
                loadCart()
            } else {
                alert(data.error || "Kh√¥ng th·ªÉ x√≥a s·∫£n ph·∫©m!")
            }
        } catch (err) {
            alert("Kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c server!")
            console.error(err)
        }
    }

    // T√≠nh t·ªïng gi√° tr·ªã gi·ªè h√†ng
    const calculateTotal = () => {
        return cartItems.reduce((total, item) => {
            return total + (item.total_price || 0)
        }, 0)
    }

    // Navigation functions
    const goToLogin = () => {
        navigate("/login")
    }

    const goToHome = () => {
        navigate("/")
    }

    const goToProducts = () => {
        navigate("/products")
    }

    const handleCheckout = () => {
        if (cartItems.length === 0) {
            alert("Gi·ªè h√†ng tr·ªëng!")
            return
        }
        // TODO: Implement checkout logic
        alert("T√≠nh nƒÉng thanh to√°n ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn!")
    }

    const handleLogout = () => {
        localStorage.removeItem("token")
        alert("ƒê√£ ƒëƒÉng xu·∫•t!")
        navigate("/")
    }

    if (!token) {
        return (
            <div className="cart-container">
                <header className="header">
                    <div className="header-content">
                        <h1 className="logo" onClick={goToHome}>C·ª≠a H√†ng ƒê·ªì Ch∆°i</h1>
                        <nav className="nav">
                            <button onClick={goToHome} className="btn">Trang ch·ªß</button>
                            <button onClick={goToProducts} className="btn">S·∫£n ph·∫©m</button>
                            <button onClick={goToLogin} className="btn">ƒêƒÉng nh·∫≠p</button>
                        </nav>
                    </div>
                </header>
                <div className="login-required">
                    <h2>Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ xem gi·ªè h√†ng</h2>
                    <button onClick={goToLogin} className="btn">ƒêƒÉng nh·∫≠p</button>
                </div>
            </div>
        )
    }

    if (loading) {
        return (
            <div className="cart-container">
                <header className="header">
                    <div className="header-content">
                        <h1 className="logo" onClick={goToHome}>C·ª≠a H√†ng ƒê·ªì Ch∆°i</h1>
                        <nav className="nav">
                            <button onClick={goToHome} className="btn">Trang ch·ªß</button>
                            <button onClick={goToProducts} className="btn">S·∫£n ph·∫©m</button>
                            <button onClick={handleLogout} className="btn">ƒêƒÉng xu·∫•t</button>
                        </nav>
                    </div>
                </header>
                <div className="loading-container">
                    <p>ƒêang t·∫£i gi·ªè h√†ng...</p>
                </div>
            </div>
        )
    }

    return (
        <div className="cart-container">
            {/* Header - gi·ªëng nh∆∞ Home */}
            <header className="header">
                <div className="header-content">
                    <h1 className="logo" onClick={goToHome}>C·ª≠a H√†ng ƒê·ªì Ch∆°i</h1>
                    <nav className="nav">
                        <button onClick={goToHome} className="btn">Trang ch·ªß</button>
                        <button onClick={goToProducts} className="btn">S·∫£n ph·∫©m</button>
                        <button onClick={() => navigate("/cart")} className="btn">Gi·ªè h√†ng</button>
                        <button onClick={handleLogout} className="btn">ƒêƒÉng xu·∫•t</button>
                    </nav>
                </div>
            </header>

            {/* Main Content */}
            <div className="cart-content">
                <div className="cart-header">
                    <h2>Gi·ªè h√†ng c·ªßa b·∫°n</h2>
                    <p className="cart-count">{cartItems.length} s·∫£n ph·∫©m</p>
                </div>

                {cartItems.length === 0 ? (
                    <div className="empty-cart">
                        <div className="empty-cart-icon">üõí</div>
                        <h3>Gi·ªè h√†ng tr·ªëng</h3>
                        <p>H√£y th√™m m·ªôt s·ªë s·∫£n ph·∫©m v√†o gi·ªè h√†ng c·ªßa b·∫°n!</p>
                        <button onClick={goToProducts} className="btn">Mua s·∫Øm ngay</button>
                    </div>
                ) : (
                    <>
                        {/* Cart Items */}
                        <div className="cart-items">
                            {cartItems.map((item) => (
                                <div key={`${item.product_id}-${item.item_type}`} className="cart-item">
                                    <div className="item-image">
                                        <img
                                            src={item.product?.image || "/placeholder.svg?height=100&width=100&query=toy"}
                                            alt={item.product?.name}
                                        />
                                    </div>
                                    <div className="item-details">
                                        <h4 className="item-name">{item.product?.name}</h4>
                                        <p className="item-price">{item.product?.price?.toLocaleString("vi-VN")}ƒë</p>
                                        {item.item_type === 'rent' && (
                                            <p className="item-rental">Thu√™ {item.rental_days} ng√†y</p>
                                        )}
                                    </div>
                                    <div className="item-controls">
                                        <div className="quantity-controls">
                                            <button
                                                onClick={() => updateQuantity(item.product_id, item.quantity - 1, item.item_type)}
                                                className="quantity-btn"
                                            >
                                                -
                                            </button>
                                            <span className="quantity">{item.quantity}</span>
                                            <button
                                                onClick={() => updateQuantity(item.product_id, item.quantity + 1, item.item_type)}
                                                className="quantity-btn"
                                            >
                                                +
                                            </button>
                                        </div>
                                        <div className="item-total">
                                            {item.total_price?.toLocaleString("vi-VN")}ƒë
                                        </div>
                                        <button
                                            onClick={() => removeFromCart(item.product_id, item.item_type)}
                                            className="remove-btn"
                                        >
                                            X√≥a
                                        </button>
                                    </div>
                                </div>
                            ))}
                        </div>

                        {/* Cart Summary */}
                        <div className="cart-summary">
                            <div className="summary-row">
                                <span>T·∫°m t√≠nh:</span>
                                <span>{calculateTotal().toLocaleString("vi-VN")}ƒë</span>
                            </div>
                            <div className="summary-row total">
                                <span>T·ªïng c·ªông:</span>
                                <span>{calculateTotal().toLocaleString("vi-VN")}ƒë</span>
                            </div>
                            <button onClick={handleCheckout} className="checkout-btn">
                                Thanh to√°n
                            </button>
                        </div>
                    </>
                )}
            </div>

            {/* Footer */}
            <footer className="footer">
                <p>¬© 2024 C·ª≠a H√†ng ƒê·ªì Ch∆°i. T·∫•t c·∫£ quy·ªÅn ƒë∆∞·ª£c b·∫£o l∆∞u.</p>
            </footer>
        </div>
    )
}
