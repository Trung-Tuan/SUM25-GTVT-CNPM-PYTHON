import { useState, useEffect, useRef } from "react"
import { useNavigate, useSearchParams } from "react-router-dom"
import "../styles/Product.css"

export default function Products() {
    const navigate = useNavigate()
    const [searchParams] = useSearchParams()
    const searchTimeoutRef = useRef(null)

    // State cho d·ªØ li·ªáu
    const [products, setProducts] = useState([])
    const [categories, setCategories] = useState([])
    const [loading, setLoading] = useState(true)
    const [token] = useState(localStorage.getItem("token"))

    // State cho search v√† filter
    const [searchQuery, setSearchQuery] = useState(searchParams.get("q") || "")
    const [searchResults, setSearchResults] = useState([])
    const [isSearching, setIsSearching] = useState(false)

    // Filter t·∫°m (ch·ªâ thay ƒë·ªïi khi ng∆∞·ªùi d√πng ch·ªânh form)
    const [tempCategory, setTempCategory] = useState("")
    const [tempPriceRange, setTempPriceRange] = useState({ min: "", max: "" })
    const [tempAgeRange, setTempAgeRange] = useState("")

    // Filter th·ª±c s·ª± √°p d·ª•ng (ch·ªâ thay ƒë·ªïi khi b·∫•m √Åp d·ª•ng)
    const [selectedCategory, setSelectedCategory] = useState("")
    const [priceRange, setPriceRange] = useState({ min: "", max: "" })
    const [selectedAgeRange, setSelectedAgeRange] = useState("")

    // State cho pagination
    const [currentPage, setCurrentPage] = useState(1)
    const [productsPerPage] = useState(12)

    // State cho sorting
    const [sortBy, setSortBy] = useState("name")
    const [sortOrder, setSortOrder] = useState("asc")

    // Load d·ªØ li·ªáu khi component mount
    useEffect(() => {
        loadCategories()
    }, [])

    // Load products khi filters thay ƒë·ªïi
    useEffect(() => {
        loadProducts()
    }, [selectedCategory, priceRange, selectedAgeRange, sortBy, sortOrder])

    // Handle search query t·ª´ URL
    useEffect(() => {
        const queryFromURL = searchParams.get("q")
        if (queryFromURL) {
            setSearchQuery(queryFromURL)
            // C√≥ th·ªÉ th√™m logic search t·∫°i ƒë√¢y n·∫øu c·∫ßn
        }
    }, [searchParams])

    // API CALL: L·∫•y danh s√°ch danh m·ª•c
    const loadCategories = async () => {
        try {
            const res = await fetch("http://localhost:6868/api/categories", {
                method: "GET",
                headers: { "Content-Type": "application/json" },
            })
            const data = await res.json()

            if (res.ok) {
                setCategories(data.categories || [])
            } else {
                console.error("L·ªói khi t·∫£i danh m·ª•c:", data.message)
            }
        } catch (err) {
            console.error("Kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c server:", err)
        }
    }

    // API CALL: L·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m v·ªõi filter
    const loadProducts = async () => {
        setLoading(true)
        try {
            let url = "http://localhost:6868/api/products?"
            const params = new URLSearchParams()

            if (selectedCategory) params.append("category_id", selectedCategory)
            if (priceRange.min) params.append("min_price", priceRange.min)
            if (priceRange.max) params.append("max_price", priceRange.max)
            if (selectedAgeRange) params.append("age_range", selectedAgeRange)
            if (sortBy) params.append("sort_by", sortBy)
            if (sortOrder) params.append("sort_order", sortOrder)

            url += params.toString()

            const res = await fetch(url, {
                method: "GET",
                headers: { "Content-Type": "application/json" },
            })
            const data = await res.json()

            if (res.ok) {
                setProducts(data.products || [])
            } else {
                console.error("L·ªói khi t·∫£i s·∫£n ph·∫©m:", data.message)
            }
        } catch (err) {
            console.error("Kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c server:", err)
        } finally {
            setLoading(false)
        }
    }

    // API CALL: Th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng
    const addToCart = async (productId) => {
        const token = localStorage.getItem("token")
        if (!token) {
            alert("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ th√™m v√†o gi·ªè h√†ng!")
            navigate("/login")
            return
        }

        try {
            const res = await fetch("http://localhost:6868/api/cart/add", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    Authorization: `Bearer ${token}`,
                },
                body: JSON.stringify({ product_id: productId, quantity: 1 }),
            })
            const data = await res.json()

            if (res.ok) {
                alert("ƒê√£ th√™m v√†o gi·ªè h√†ng!")
            } else {
                alert(data.message || "Kh√¥ng th·ªÉ th√™m v√†o gi·ªè h√†ng!")
            }
        } catch (err) {
            alert("Kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c server!")
            console.error(err)
        }
    }

    // API CALL: T√¨m ki·∫øm s·∫£n ph·∫©m
    const searchProducts = async (query) => {
        if (!query.trim()) {
            setSearchResults([])
            setIsSearching(false)
            return
        }

        setIsSearching(true)
        try {
            const res = await fetch(`http://localhost:6868/api/products/search?q=${encodeURIComponent(query)}`, {
                method: "GET",
                headers: { "Content-Type": "application/json" },
            })
            const data = await res.json()

            if (res.ok) {
                setSearchResults(data.products || [])
            } else {
                console.error("L·ªói khi t√¨m ki·∫øm:", data.message)
                setSearchResults([])
            }
        } catch (err) {
            console.error("Kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c server:", err)
            setSearchResults([])
        } finally {
            setIsSearching(false)
        }
    }

    // Handle search input
    const handleSearchChange = (e) => {
        const query = e.target.value
        setSearchQuery(query)

        // Clear previous timeout
        if (searchTimeoutRef.current) {
            clearTimeout(searchTimeoutRef.current)
        }

        // Set new timeout
        searchTimeoutRef.current = setTimeout(() => {
            searchProducts(query)
        }, 500)
    }

    const handleSearchSubmit = (e) => {
        e.preventDefault()
        if (searchQuery.trim()) {
            navigate(`/products?q=${encodeURIComponent(searchQuery)}`)
            setCurrentPage(1)
        }
    }

    // √Åp d·ª•ng filter (khi nh·∫•n n√∫t) - FIX: Kh√¥ng reload trang
    const applyFilters = (e) => {
        e.preventDefault() // NgƒÉn form submit
        setSelectedCategory(tempCategory)
        setPriceRange(tempPriceRange)
        setSelectedAgeRange(tempAgeRange)
        setCurrentPage(1)
        // Kh√¥ng c·∫ßn g·ªçi loadProducts() ·ªü ƒë√¢y v√¨ useEffect s·∫Ω handle
    }

    const handleLogout = () => {
        localStorage.removeItem("token")
        alert("ƒê√£ ƒëƒÉng xu·∫•t!")
        navigate("/")
    }

    const clearFilters = (e) => {
        if (e) e.preventDefault() // NgƒÉn form submit n·∫øu c√≥

        setTempCategory("")
        setTempPriceRange({ min: "", max: "" })
        setTempAgeRange("")
        setSelectedCategory("")
        setPriceRange({ min: "", max: "" })
        setSelectedAgeRange("")
        setSortBy("name")
        setSortOrder("asc")
        setCurrentPage(1)
        // loadProducts s·∫Ω ƒë∆∞·ª£c g·ªçi t·ª± ƒë·ªông qua useEffect
    }

    // Navigation functions
    const viewProductDetail = (productId) => {
        navigate(`/product/${productId}`)
    }

    const goToCart = () => {
        navigate("/cart")
    }

    const goToLogin = () => {
        navigate("/login")
    }

    // Handle sort change - FIX: Kh√¥ng g·ªçi loadProducts tr·ª±c ti·∫øp
    const handleSortChange = (e) => {
        const [field, order] = e.target.value.split('-')
        setSortBy(field)
        setSortOrder(order)
        // useEffect s·∫Ω t·ª± ƒë·ªông g·ªçi loadProducts
    }

    // Pagination logic
    const indexOfLastProduct = currentPage * productsPerPage
    const indexOfFirstProduct = indexOfLastProduct - productsPerPage
    const currentProducts = products.slice(indexOfFirstProduct, indexOfLastProduct)
    const totalPages = Math.ceil(products.length / productsPerPage)

    const paginate = (pageNumber) => setCurrentPage(pageNumber)

    // Cleanup timeout on unmount
    useEffect(() => {
        return () => {
            if (searchTimeoutRef.current) {
                clearTimeout(searchTimeoutRef.current)
            }
        }
    }, [])

    if (loading) {
        return (
            <div className="loading-container">
                <p>ƒêang t·∫£i s·∫£n ph·∫©m...</p>
            </div>
        )
    }

    return (
        <div className="products-container">
            {/* Header */}
            <header className="header">
                <div className="header-content">
                    <h1 className="logo" onClick={() => navigate("/")}>C·ª≠a H√†ng ƒê·ªì Ch∆°i</h1>

                    <form onSubmit={handleSearchSubmit} className="search-form">
                        <div className="search-container">
                            <input
                                type="text"
                                placeholder="T√¨m ki·∫øm ƒë·ªì ch∆°i..."
                                value={searchQuery}
                                onChange={handleSearchChange}
                                className="search-input"
                            />
                            <button type="submit" className="search-button">
                                üîç
                            </button>

                            {searchQuery && (
                                <div className="search-dropdown">
                                    {isSearching ? (
                                        <div className="search-loading">ƒêang t√¨m ki·∫øm...</div>
                                    ) : searchResults.length > 0 ? (
                                        <>
                                            {searchResults.slice(0, 5).map((product) => (
                                                <div
                                                    key={product.id}
                                                    className="search-result-item"
                                                    onClick={() => viewProductDetail(product.id)}
                                                >
                                                    <img
                                                        src={product.image || "/placeholder.svg?height=40&width=40&query=toy"}
                                                        alt={product.name}
                                                        className="search-result-image"
                                                    />
                                                    <div className="search-result-info">
                                                        <span className="search-result-name">{product.name}</span>
                                                        <span className="search-result-price">{product.price?.toLocaleString("vi-VN")}ƒë</span>
                                                    </div>
                                                </div>
                                            ))}
                                            {searchResults.length > 5 && (
                                                <div className="search-view-all">
                                                    Xem t·∫•t c·∫£ {searchResults.length} k·∫øt qu·∫£
                                                </div>
                                            )}
                                        </>
                                    ) : (
                                        <div className="search-no-results">Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o</div>
                                    )}
                                </div>
                            )}
                        </div>
                    </form>

                    <nav className="nav">
                        <button onClick={() => navigate("/")} className="btn">
                            Trang ch·ªß
                        </button>
                        <button onClick={() => navigate("/products")} className="btn">
                            S·∫£n ph·∫©m
                        </button>
                        <button onClick={goToCart} className="btn">Gi·ªè h√†ng</button>
                        {token ? (
                            <button onClick={handleLogout} className="btn">
                                ƒêƒÉng xu·∫•t
                            </button>
                        ) : (
                            <button onClick={goToLogin} className="btn">
                                ƒêƒÉng nh·∫≠p
                            </button>
                        )}
                    </nav>
                </div>
            </header>

            {/* Main Content */}
            <div className="main-content">
                {/* Sidebar Filter */}
                <aside className="filter-sidebar">
                    <div className="filter-section">
                        <div className="filter-header">
                            <h3>L·ªçc s·∫£n ph·∫©m</h3>
                            <button onClick={clearFilters} className="clear-filters-btn" type="button">
                                X√≥a b·ªô l·ªçc
                            </button>
                        </div>

                        {/* Filter Form - Wrap in form ƒë·ªÉ handle submit */}
                        <form onSubmit={applyFilters}>
                            {/* Category Filter */}
                            <div className="filter-group">
                                <h4>Danh m·ª•c</h4>
                                <select
                                    value={tempCategory}
                                    onChange={(e) => setTempCategory(e.target.value)}
                                    className="filter-select"
                                >
                                    <option value="">T·∫•t c·∫£ danh m·ª•c</option>
                                    {categories.map((category) => (
                                        <option key={category.id} value={category.id}>
                                            {category.name}
                                        </option>
                                    ))}
                                </select>
                            </div>

                            {/* Price Range Filter */}
                            <div className="filter-group">
                                <h4>Kho·∫£ng gi√°</h4>
                                <div className="price-range">
                                    <input
                                        type="number"
                                        placeholder="T·ª´"
                                        value={tempPriceRange.min}
                                        onChange={(e) => setTempPriceRange({ ...tempPriceRange, min: e.target.value })}
                                        className="price-input"
                                    />
                                    <span>-</span>
                                    <input
                                        type="number"
                                        placeholder="ƒê·∫øn"
                                        value={tempPriceRange.max}
                                        onChange={(e) => setTempPriceRange({ ...tempPriceRange, max: e.target.value })}
                                        className="price-input"
                                    />
                                </div>
                            </div>

                            {/* Age Range Filter */}
                            <div className="filter-group">
                                <h4>ƒê·ªô tu·ªïi</h4>
                                <select
                                    value={tempAgeRange}
                                    onChange={(e) => setTempAgeRange(e.target.value)}
                                    className="filter-select"
                                >
                                    <option value="">T·∫•t c·∫£ ƒë·ªô tu·ªïi</option>
                                    <option value="0-2">0-2 tu·ªïi</option>
                                    <option value="3-5">3-5 tu·ªïi</option>
                                    <option value="6-8">6-8 tu·ªïi</option>
                                    <option value="9-12">9-12 tu·ªïi</option>
                                    <option value="13+">13+ tu·ªïi</option>
                                </select>
                            </div>

                            <div className="filter-actions">
                                <button type="submit" className="apply-filters-btn">
                                    √Åp d·ª•ng
                                </button>
                            </div>
                        </form>
                    </div>
                </aside>

                {/* Products Section */}
                <main className="products-section">
                    <div className="products-header">
                        <div className="results-info">
                            <h2>T·∫•t c·∫£ s·∫£n ph·∫©m ({products.length})</h2>
                            {searchQuery && (
                                <p>K·∫øt qu·∫£ t√¨m ki·∫øm cho: "<strong>{searchQuery}</strong>"</p>
                            )}
                        </div>

                        <div className="sort-section">
                            <label>S·∫Øp x·∫øp theo:</label>
                            <select
                                value={`${sortBy}-${sortOrder}`}
                                onChange={handleSortChange}
                                className="sort-select"
                            >
                                <option value="name-asc">T√™n A-Z</option>
                                <option value="name-desc">T√™n Z-A</option>
                                <option value="price-asc">Gi√° th·∫•p ƒë·∫øn cao</option>
                                <option value="price-desc">Gi√° cao ƒë·∫øn th·∫•p</option>
                                <option value="created_at-desc">M·ªõi nh·∫•t</option>
                            </select>
                        </div>
                    </div>

                    {currentProducts.length > 0 ? (
                        <>
                            <div className="products-grid">
                                {currentProducts.map((product) => (
                                    <div key={product.id} className="product-card">
                                        <img
                                            src={product.image || "/placeholder.svg?height=200&width=200&query=toy"}
                                            alt={product.name}
                                            className="product-image"
                                            onClick={() => viewProductDetail(product.id)}
                                        />
                                        <div className="product-info">
                                            <h4 className="product-name" onClick={() => viewProductDetail(product.id)}>
                                                {product.name}
                                            </h4>
                                            <p className="product-price">{product.price?.toLocaleString("vi-VN")}ƒë</p>
                                            {product.age_range && (
                                                <p className="product-age">ƒê·ªô tu·ªïi: {product.age_range}</p>
                                            )}
                                            <button onClick={() => addToCart(product.id)} className="add-to-cart-button">
                                                Th√™m v√†o gi·ªè
                                            </button>
                                        </div>
                                    </div>
                                ))}
                            </div>

                            {totalPages > 1 && (
                                <div className="pagination">
                                    <button
                                        onClick={() => paginate(currentPage - 1)}
                                        disabled={currentPage === 1}
                                        className="pagination-btn"
                                    >
                                        ¬´ Tr∆∞·ªõc
                                    </button>

                                    {[...Array(totalPages)].map((_, index) => (
                                        <button
                                            key={index + 1}
                                            onClick={() => paginate(index + 1)}
                                            className={`pagination-btn ${currentPage === index + 1 ? 'active' : ''}`}
                                        >
                                            {index + 1}
                                        </button>
                                    ))}

                                    <button
                                        onClick={() => paginate(currentPage + 1)}
                                        disabled={currentPage === totalPages}
                                        className="pagination-btn"
                                    >
                                        Sau ¬ª
                                    </button>
                                </div>
                            )}
                        </>
                    ) : (
                        <div className="no-products">
                            <p>Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o</p>
                            <button onClick={clearFilters} className="btn" type="button">
                                X√≥a b·ªô l·ªçc
                            </button>
                        </div>
                    )}
                </main>
            </div>

            <footer className="footer">
                <p>¬© 2024 C·ª≠a H√†ng ƒê·ªì Ch∆°i. T·∫•t c·∫£ quy·ªÅn ƒë∆∞·ª£c b·∫£o l∆∞u.</p>
            </footer>
        </div>
    )
}